// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: api/cluster/v1alpha1/message.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       string      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	PublicKey  string      `protobuf:"bytes,4,opt,name=public_key,proto3" json:"public_key,omitempty"`
	Region     string      `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	AccessId   string      `protobuf:"bytes,6,opt,name=access_id,proto3" json:"access_id,omitempty"`
	AccessKey  string      `protobuf:"bytes,7,opt,name=access_key,proto3" json:"access_key,omitempty"`
	Nodes      []*NodeArgs `protobuf:"bytes,8,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NodeId     int64       `protobuf:"varint,9,opt,name=node_id,proto3" json:"node_id,omitempty"`
	PrivateKey string      `protobuf:"bytes,10,opt,name=private_key,proto3" json:"private_key,omitempty"`
}

func (x *ClusterArgs) Reset() {
	*x = ClusterArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterArgs) ProtoMessage() {}

func (x *ClusterArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterArgs.ProtoReflect.Descriptor instead.
func (*ClusterArgs) Descriptor() ([]byte, []int) {
	return file_api_cluster_v1alpha1_message_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterArgs) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterArgs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterArgs) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ClusterArgs) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClusterArgs) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *ClusterArgs) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *ClusterArgs) GetNodes() []*NodeArgs {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ClusterArgs) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ClusterArgs) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type NodeArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Id   int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NodeArgs) Reset() {
	*x = NodeArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeArgs) ProtoMessage() {}

func (x *NodeArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeArgs.ProtoReflect.Descriptor instead.
func (*NodeArgs) Descriptor() ([]byte, []int) {
	return file_api_cluster_v1alpha1_message_proto_rawDescGZIP(), []int{1}
}

func (x *NodeArgs) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeArgs) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *NodeArgs) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *NodeArgs) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClusterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ClusterList) Reset() {
	*x = ClusterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterList) ProtoMessage() {}

func (x *ClusterList) ProtoReflect() protoreflect.Message {
	mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterList.ProtoReflect.Descriptor instead.
func (*ClusterList) Descriptor() ([]byte, []int) {
	return file_api_cluster_v1alpha1_message_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterList) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version              string       `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ApiServerAddress     string       `protobuf:"bytes,4,opt,name=api_server_address,proto3" json:"api_server_address,omitempty"`
	Config               string       `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Addons               string       `protobuf:"bytes,6,opt,name=addons,proto3" json:"addons,omitempty"`
	AddonsConfig         string       `protobuf:"bytes,7,opt,name=addons_config,proto3" json:"addons_config,omitempty"`
	Status               uint32       `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Type                 string       `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	KubeConfig           string       `protobuf:"bytes,10,opt,name=kube_config,proto3" json:"kube_config,omitempty"`
	PublicKey            string       `protobuf:"bytes,11,opt,name=public_key,proto3" json:"public_key,omitempty"`
	PrivateKey           string       `protobuf:"bytes,12,opt,name=private_key,proto3" json:"private_key,omitempty"`
	Connections          string       `protobuf:"bytes,13,opt,name=connections,proto3" json:"connections,omitempty"`
	CertificateAuthority string       `protobuf:"bytes,14,opt,name=certificate_authority,proto3" json:"certificate_authority,omitempty"`
	Region               string       `protobuf:"bytes,15,opt,name=region,proto3" json:"region,omitempty"`
	IpCidr               string       `protobuf:"bytes,16,opt,name=ip_cidr,proto3" json:"ip_cidr,omitempty"`
	AccessId             string       `protobuf:"bytes,17,opt,name=access_id,proto3" json:"access_id,omitempty"`
	AccessKey            string       `protobuf:"bytes,18,opt,name=access_key,proto3" json:"access_key,omitempty"`
	BostionHost          *BostionHost `protobuf:"bytes,19,opt,name=bostion_host,proto3" json:"bostion_host,omitempty"`
	Nodes                []*Node      `protobuf:"bytes,20,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NodeGroups           []*NodeGroup `protobuf:"bytes,21,rep,name=node_groups,proto3" json:"node_groups,omitempty"`
	StatusString         string       `protobuf:"bytes,22,opt,name=status_string,proto3" json:"status_string,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_api_cluster_v1alpha1_message_proto_rawDescGZIP(), []int{3}
}

func (x *Cluster) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Cluster) GetApiServerAddress() string {
	if x != nil {
		return x.ApiServerAddress
	}
	return ""
}

func (x *Cluster) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Cluster) GetAddons() string {
	if x != nil {
		return x.Addons
	}
	return ""
}

func (x *Cluster) GetAddonsConfig() string {
	if x != nil {
		return x.AddonsConfig
	}
	return ""
}

func (x *Cluster) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Cluster) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Cluster) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *Cluster) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Cluster) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *Cluster) GetConnections() string {
	if x != nil {
		return x.Connections
	}
	return ""
}

func (x *Cluster) GetCertificateAuthority() string {
	if x != nil {
		return x.CertificateAuthority
	}
	return ""
}

func (x *Cluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Cluster) GetIpCidr() string {
	if x != nil {
		return x.IpCidr
	}
	return ""
}

func (x *Cluster) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *Cluster) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Cluster) GetBostionHost() *BostionHost {
	if x != nil {
		return x.BostionHost
	}
	return nil
}

func (x *Cluster) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Cluster) GetNodeGroups() []*NodeGroup {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

func (x *Cluster) GetStatusString() string {
	if x != nil {
		return x.StatusString
	}
	return ""
}

type NodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type           string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Image          string  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Os             string  `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	Arch           string  `protobuf:"bytes,6,opt,name=arch,proto3" json:"arch,omitempty"`
	Cpu            int32   `protobuf:"varint,7,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory         float64 `protobuf:"fixed64,8,opt,name=memory,proto3" json:"memory,omitempty"`
	Gpu            int32   `protobuf:"varint,9,opt,name=gpu,proto3" json:"gpu,omitempty"`
	NodeInitScript string  `protobuf:"bytes,10,opt,name=node_init_script,proto3" json:"node_init_script,omitempty"`
	MinSize        int32   `protobuf:"varint,11,opt,name=min_size,proto3" json:"min_size,omitempty"`
	MaxSize        int32   `protobuf:"varint,12,opt,name=max_size,proto3" json:"max_size,omitempty"`
	TargetSize     int32   `protobuf:"varint,13,opt,name=target_size,proto3" json:"target_size,omitempty"`
	SystemDisk     int32   `protobuf:"varint,14,opt,name=system_disk,proto3" json:"system_disk,omitempty"`
	DataDisk       int32   `protobuf:"varint,15,opt,name=data_disk,proto3" json:"data_disk,omitempty"`
	ClusterId      int64   `protobuf:"varint,16,opt,name=cluster_id,proto3" json:"cluster_id,omitempty"`
}

func (x *NodeGroup) Reset() {
	*x = NodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroup) ProtoMessage() {}

func (x *NodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroup.ProtoReflect.Descriptor instead.
func (*NodeGroup) Descriptor() ([]byte, []int) {
	return file_api_cluster_v1alpha1_message_proto_rawDescGZIP(), []int{4}
}

func (x *NodeGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeGroup) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeGroup) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *NodeGroup) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *NodeGroup) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *NodeGroup) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *NodeGroup) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *NodeGroup) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *NodeGroup) GetNodeInitScript() string {
	if x != nil {
		return x.NodeInitScript
	}
	return ""
}

func (x *NodeGroup) GetMinSize() int32 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *NodeGroup) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *NodeGroup) GetTargetSize() int32 {
	if x != nil {
		return x.TargetSize
	}
	return 0
}

func (x *NodeGroup) GetSystemDisk() int32 {
	if x != nil {
		return x.SystemDisk
	}
	return 0
}

func (x *NodeGroup) GetDataDisk() int32 {
	if x != nil {
		return x.DataDisk
	}
	return 0
}

func (x *NodeGroup) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                    string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels                  string  `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	Kernel                  string  `protobuf:"bytes,4,opt,name=kernel,proto3" json:"kernel,omitempty"`
	ContainerRuntime        string  `protobuf:"bytes,5,opt,name=container_runtime,proto3" json:"container_runtime,omitempty"`
	Kubelet                 string  `protobuf:"bytes,6,opt,name=kubelet,proto3" json:"kubelet,omitempty"`
	KubeProxy               string  `protobuf:"bytes,7,opt,name=kube_proxy,proto3" json:"kube_proxy,omitempty"`
	SshPort                 int32   `protobuf:"varint,8,opt,name=ssh_port,proto3" json:"ssh_port,omitempty"`
	GrpcPort                int32   `protobuf:"varint,9,opt,name=grpc_port,proto3" json:"grpc_port,omitempty"`
	InternalIp              string  `protobuf:"bytes,10,opt,name=internal_ip,proto3" json:"internal_ip,omitempty"`
	ExternalIp              string  `protobuf:"bytes,11,opt,name=external_ip,proto3" json:"external_ip,omitempty"`
	User                    string  `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
	Role                    string  `protobuf:"bytes,13,opt,name=role,proto3" json:"role,omitempty"`
	Status                  uint32  `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	ErrorInfo               string  `protobuf:"bytes,15,opt,name=error_info,proto3" json:"error_info,omitempty"`
	Zone                    string  `protobuf:"bytes,16,opt,name=zone,proto3" json:"zone,omitempty"`
	IpCidr                  string  `protobuf:"bytes,17,opt,name=ip_cidr,proto3" json:"ip_cidr,omitempty"`
	GpuSpec                 string  `protobuf:"bytes,18,opt,name=gpu_spec,proto3" json:"gpu_spec,omitempty"`
	SystemDisk              int32   `protobuf:"varint,19,opt,name=system_disk,proto3" json:"system_disk,omitempty"`
	DataDisk                int32   `protobuf:"varint,20,opt,name=data_disk,proto3" json:"data_disk,omitempty"`
	NodePrice               float64 `protobuf:"fixed64,21,opt,name=node_price,proto3" json:"node_price,omitempty"`
	PodPrice                float64 `protobuf:"fixed64,22,opt,name=pod_price,proto3" json:"pod_price,omitempty"`
	InternetMaxBandwidthOut int32   `protobuf:"varint,23,opt,name=internet_max_bandwidth_out,proto3" json:"internet_max_bandwidth_out,omitempty"`
	ClusterId               int64   `protobuf:"varint,24,opt,name=cluster_id,proto3" json:"cluster_id,omitempty"`
	NodeGroupId             string  `protobuf:"bytes,25,opt,name=node_group_id,proto3" json:"node_group_id,omitempty"`
	StatusString            string  `protobuf:"bytes,26,opt,name=status_string,proto3" json:"status_string,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_api_cluster_v1alpha1_message_proto_rawDescGZIP(), []int{5}
}

func (x *Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *Node) GetKernel() string {
	if x != nil {
		return x.Kernel
	}
	return ""
}

func (x *Node) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *Node) GetKubelet() string {
	if x != nil {
		return x.Kubelet
	}
	return ""
}

func (x *Node) GetKubeProxy() string {
	if x != nil {
		return x.KubeProxy
	}
	return ""
}

func (x *Node) GetSshPort() int32 {
	if x != nil {
		return x.SshPort
	}
	return 0
}

func (x *Node) GetGrpcPort() int32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *Node) GetInternalIp() string {
	if x != nil {
		return x.InternalIp
	}
	return ""
}

func (x *Node) GetExternalIp() string {
	if x != nil {
		return x.ExternalIp
	}
	return ""
}

func (x *Node) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Node) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Node) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Node) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *Node) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Node) GetIpCidr() string {
	if x != nil {
		return x.IpCidr
	}
	return ""
}

func (x *Node) GetGpuSpec() string {
	if x != nil {
		return x.GpuSpec
	}
	return ""
}

func (x *Node) GetSystemDisk() int32 {
	if x != nil {
		return x.SystemDisk
	}
	return 0
}

func (x *Node) GetDataDisk() int32 {
	if x != nil {
		return x.DataDisk
	}
	return 0
}

func (x *Node) GetNodePrice() float64 {
	if x != nil {
		return x.NodePrice
	}
	return 0
}

func (x *Node) GetPodPrice() float64 {
	if x != nil {
		return x.PodPrice
	}
	return 0
}

func (x *Node) GetInternetMaxBandwidthOut() int32 {
	if x != nil {
		return x.InternetMaxBandwidthOut
	}
	return 0
}

func (x *Node) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *Node) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

func (x *Node) GetStatusString() string {
	if x != nil {
		return x.StatusString
	}
	return ""
}

type BostionHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User       string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	ImageId    string `protobuf:"bytes,3,opt,name=image_id,proto3" json:"image_id,omitempty"`
	Image      string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Os         string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	Arch       string `protobuf:"bytes,6,opt,name=arch,proto3" json:"arch,omitempty"`
	Hostname   string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ExternalIp string `protobuf:"bytes,8,opt,name=external_ip,proto3" json:"external_ip,omitempty"`
	InternalIp string `protobuf:"bytes,9,opt,name=internal_ip,proto3" json:"internal_ip,omitempty"`
	SshPort    int32  `protobuf:"varint,10,opt,name=ssh_port,proto3" json:"ssh_port,omitempty"`
	ClusterId  int64  `protobuf:"varint,11,opt,name=cluster_id,proto3" json:"cluster_id,omitempty"`
}

func (x *BostionHost) Reset() {
	*x = BostionHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BostionHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BostionHost) ProtoMessage() {}

func (x *BostionHost) ProtoReflect() protoreflect.Message {
	mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BostionHost.ProtoReflect.Descriptor instead.
func (*BostionHost) Descriptor() ([]byte, []int) {
	return file_api_cluster_v1alpha1_message_proto_rawDescGZIP(), []int{6}
}

func (x *BostionHost) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BostionHost) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *BostionHost) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *BostionHost) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BostionHost) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *BostionHost) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *BostionHost) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *BostionHost) GetExternalIp() string {
	if x != nil {
		return x.ExternalIp
	}
	return ""
}

func (x *BostionHost) GetInternalIp() string {
	if x != nil {
		return x.InternalIp
	}
	return ""
}

func (x *BostionHost) GetSshPort() int32 {
	if x != nil {
		return x.SshPort
	}
	return 0
}

func (x *BostionHost) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type Regions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []string `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *Regions) Reset() {
	*x = Regions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regions) ProtoMessage() {}

func (x *Regions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cluster_v1alpha1_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regions.ProtoReflect.Descriptor instead.
func (*Regions) Descriptor() ([]byte, []int) {
	return file_api_cluster_v1alpha1_message_proto_rawDescGZIP(), []int{7}
}

func (x *Regions) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

var File_api_cluster_v1alpha1_message_proto protoreflect.FileDescriptor

var file_api_cluster_v1alpha1_message_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0xa9, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x22, 0x52, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xfb, 0x05, 0x0a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x62, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x62, 0x6f, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x9f, 0x03, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x94, 0x06, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x6c,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x6f,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xa3, 0x02, 0x0a, 0x0b, 0x42, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x07, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1f,
	0x5a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_cluster_v1alpha1_message_proto_rawDescOnce sync.Once
	file_api_cluster_v1alpha1_message_proto_rawDescData = file_api_cluster_v1alpha1_message_proto_rawDesc
)

func file_api_cluster_v1alpha1_message_proto_rawDescGZIP() []byte {
	file_api_cluster_v1alpha1_message_proto_rawDescOnce.Do(func() {
		file_api_cluster_v1alpha1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_cluster_v1alpha1_message_proto_rawDescData)
	})
	return file_api_cluster_v1alpha1_message_proto_rawDescData
}

var file_api_cluster_v1alpha1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_cluster_v1alpha1_message_proto_goTypes = []any{
	(*ClusterArgs)(nil), // 0: cluster.v1alpha1.ClusterArgs
	(*NodeArgs)(nil),    // 1: cluster.v1alpha1.NodeArgs
	(*ClusterList)(nil), // 2: cluster.v1alpha1.ClusterList
	(*Cluster)(nil),     // 3: cluster.v1alpha1.Cluster
	(*NodeGroup)(nil),   // 4: cluster.v1alpha1.NodeGroup
	(*Node)(nil),        // 5: cluster.v1alpha1.Node
	(*BostionHost)(nil), // 6: cluster.v1alpha1.BostionHost
	(*Regions)(nil),     // 7: cluster.v1alpha1.Regions
}
var file_api_cluster_v1alpha1_message_proto_depIdxs = []int32{
	1, // 0: cluster.v1alpha1.ClusterArgs.nodes:type_name -> cluster.v1alpha1.NodeArgs
	3, // 1: cluster.v1alpha1.ClusterList.clusters:type_name -> cluster.v1alpha1.Cluster
	6, // 2: cluster.v1alpha1.Cluster.bostion_host:type_name -> cluster.v1alpha1.BostionHost
	5, // 3: cluster.v1alpha1.Cluster.nodes:type_name -> cluster.v1alpha1.Node
	4, // 4: cluster.v1alpha1.Cluster.node_groups:type_name -> cluster.v1alpha1.NodeGroup
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_api_cluster_v1alpha1_message_proto_init() }
func file_api_cluster_v1alpha1_message_proto_init() {
	if File_api_cluster_v1alpha1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_cluster_v1alpha1_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cluster_v1alpha1_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NodeArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cluster_v1alpha1_message_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cluster_v1alpha1_message_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cluster_v1alpha1_message_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*NodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cluster_v1alpha1_message_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cluster_v1alpha1_message_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BostionHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cluster_v1alpha1_message_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Regions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_cluster_v1alpha1_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cluster_v1alpha1_message_proto_goTypes,
		DependencyIndexes: file_api_cluster_v1alpha1_message_proto_depIdxs,
		MessageInfos:      file_api_cluster_v1alpha1_message_proto_msgTypes,
	}.Build()
	File_api_cluster_v1alpha1_message_proto = out.File
	file_api_cluster_v1alpha1_message_proto_rawDesc = nil
	file_api_cluster_v1alpha1_message_proto_goTypes = nil
	file_api_cluster_v1alpha1_message_proto_depIdxs = nil
}
